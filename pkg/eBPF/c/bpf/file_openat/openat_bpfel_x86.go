// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package file_openat

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type openatEventData struct {
	EventContext struct {
		Ts        uint64
		StartTime uint64
		Pid       uint32
		Tgid      uint32
		Ppid      uint32
		Glpid     uint32
		Uid       uint32
		Gid       uint32
		MountId   int32
		MountNsId uint32
		CgroupId  uint64
		NodeInfo  struct {
			Sysname    [65]uint8
			Nodename   [65]uint8
			Release    [65]uint8
			Version    [65]uint8
			Machine    [65]uint8
			Domainname [65]uint8
		}
		Comm         [16]uint8
		Cwd          [32]uint8
		MountDevname [256]uint8
	}
	Mode     uint16
	Id       int32
	Fd       int32
	Flags    int32
	Ret      int32
	Filename [4096]uint8
}

// loadOpenat returns the embedded CollectionSpec for openat.
func loadOpenat() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_OpenatBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load openat: %w", err)
	}

	return spec, err
}

// loadOpenatObjects loads openat and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*openatObjects
//	*openatPrograms
//	*openatMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadOpenatObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadOpenat()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// openatSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type openatSpecs struct {
	openatProgramSpecs
	openatMapSpecs
}

// openatSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type openatProgramSpecs struct {
	KprobeOpenatEntry   *ebpf.ProgramSpec `ebpf:"kprobe_openat_entry"`
	KretprobeOpenatExit *ebpf.ProgramSpec `ebpf:"kretprobe_openat_exit"`
}

// openatMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type openatMapSpecs struct {
	OpenatEventMap *ebpf.MapSpec `ebpf:"openat_event_map"`
}

// openatObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadOpenatObjects or ebpf.CollectionSpec.LoadAndAssign.
type openatObjects struct {
	openatPrograms
	openatMaps
}

func (o *openatObjects) Close() error {
	return _OpenatClose(
		&o.openatPrograms,
		&o.openatMaps,
	)
}

// openatMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadOpenatObjects or ebpf.CollectionSpec.LoadAndAssign.
type openatMaps struct {
	OpenatEventMap *ebpf.Map `ebpf:"openat_event_map"`
}

func (m *openatMaps) Close() error {
	return _OpenatClose(
		m.OpenatEventMap,
	)
}

// openatPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadOpenatObjects or ebpf.CollectionSpec.LoadAndAssign.
type openatPrograms struct {
	KprobeOpenatEntry   *ebpf.Program `ebpf:"kprobe_openat_entry"`
	KretprobeOpenatExit *ebpf.Program `ebpf:"kretprobe_openat_exit"`
}

func (p *openatPrograms) Close() error {
	return _OpenatClose(
		p.KprobeOpenatEntry,
		p.KretprobeOpenatExit,
	)
}

func _OpenatClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed openat_bpfel_x86.o
var _OpenatBytes []byte
