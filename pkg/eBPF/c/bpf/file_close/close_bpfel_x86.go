// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package file_close

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type closeEventData struct {
	EventContext struct {
		Ts        uint64
		StartTime uint64
		Pid       uint32
		Tgid      uint32
		Ppid      uint32
		Glpid     uint32
		Uid       uint32
		Gid       uint32
		MountId   int32
		MountNsId uint32
		CgroupId  uint64
		NodeInfo  struct {
			Sysname    [65]uint8
			Nodename   [65]uint8
			Release    [65]uint8
			Version    [65]uint8
			Machine    [65]uint8
			Domainname [65]uint8
		}
		Comm         [16]uint8
		Cwd          [32]uint8
		MountDevname [256]uint8
	}
	_   [2]byte
	Id  int32
	Fd  int32
	Ret int32
}

// loadClose returns the embedded CollectionSpec for close.
func loadClose() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_CloseBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load close: %w", err)
	}

	return spec, err
}

// loadCloseObjects loads close and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*closeObjects
//	*closePrograms
//	*closeMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadCloseObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadClose()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// closeSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type closeSpecs struct {
	closeProgramSpecs
	closeMapSpecs
}

// closeSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type closeProgramSpecs struct {
	KprobeCloseEntry   *ebpf.ProgramSpec `ebpf:"kprobe_close_entry"`
	KretprobeCloseExit *ebpf.ProgramSpec `ebpf:"kretprobe_close_exit"`
}

// closeMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type closeMapSpecs struct {
	CloseEventMap *ebpf.MapSpec `ebpf:"close_event_map"`
}

// closeObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadCloseObjects or ebpf.CollectionSpec.LoadAndAssign.
type closeObjects struct {
	closePrograms
	closeMaps
}

func (o *closeObjects) Close() error {
	return _CloseClose(
		&o.closePrograms,
		&o.closeMaps,
	)
}

// closeMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadCloseObjects or ebpf.CollectionSpec.LoadAndAssign.
type closeMaps struct {
	CloseEventMap *ebpf.Map `ebpf:"close_event_map"`
}

func (m *closeMaps) Close() error {
	return _CloseClose(
		m.CloseEventMap,
	)
}

// closePrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadCloseObjects or ebpf.CollectionSpec.LoadAndAssign.
type closePrograms struct {
	KprobeCloseEntry   *ebpf.Program `ebpf:"kprobe_close_entry"`
	KretprobeCloseExit *ebpf.Program `ebpf:"kretprobe_close_exit"`
}

func (p *closePrograms) Close() error {
	return _CloseClose(
		p.KprobeCloseEntry,
		p.KretprobeCloseExit,
	)
}

func _CloseClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed close_bpfel_x86.o
var _CloseBytes []byte
