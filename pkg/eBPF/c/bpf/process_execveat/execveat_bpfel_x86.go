// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package process_execveat

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type execveatEventData struct {
	EventContext struct {
		Ts        uint64
		StartTime uint64
		Pid       uint32
		Tgid      uint32
		Ppid      uint32
		Glpid     uint32
		Uid       uint32
		Gid       uint32
		MountId   int32
		MountNsId uint32
		CgroupId  uint64
		NodeInfo  struct {
			Sysname    [65]uint8
			Nodename   [65]uint8
			Release    [65]uint8
			Version    [65]uint8
			Machine    [65]uint8
			Domainname [65]uint8
		}
		Comm         [16]uint8
		Cwd          [32]uint8
		MountDevname [256]uint8
	}
	_              [2]byte
	Id             int32
	Fd             int32
	Flags          int32
	Ret            int32
	BinaryFilepath [4096]uint8
	UserComm       [256][4096]uint8
	EnvVars        [256][4096]uint8
}

// loadExecveat returns the embedded CollectionSpec for execveat.
func loadExecveat() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_ExecveatBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load execveat: %w", err)
	}

	return spec, err
}

// loadExecveatObjects loads execveat and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*execveatObjects
//	*execveatPrograms
//	*execveatMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadExecveatObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadExecveat()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// execveatSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type execveatSpecs struct {
	execveatProgramSpecs
	execveatMapSpecs
}

// execveatSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type execveatProgramSpecs struct {
	KprobeExecveatEntry   *ebpf.ProgramSpec `ebpf:"kprobe_execveat_entry"`
	KretprobeExecveatExit *ebpf.ProgramSpec `ebpf:"kretprobe_execveat_exit"`
}

// execveatMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type execveatMapSpecs struct {
	ExecveatEventMap *ebpf.MapSpec `ebpf:"execveat_event_map"`
}

// execveatObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadExecveatObjects or ebpf.CollectionSpec.LoadAndAssign.
type execveatObjects struct {
	execveatPrograms
	execveatMaps
}

func (o *execveatObjects) Close() error {
	return _ExecveatClose(
		&o.execveatPrograms,
		&o.execveatMaps,
	)
}

// execveatMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadExecveatObjects or ebpf.CollectionSpec.LoadAndAssign.
type execveatMaps struct {
	ExecveatEventMap *ebpf.Map `ebpf:"execveat_event_map"`
}

func (m *execveatMaps) Close() error {
	return _ExecveatClose(
		m.ExecveatEventMap,
	)
}

// execveatPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadExecveatObjects or ebpf.CollectionSpec.LoadAndAssign.
type execveatPrograms struct {
	KprobeExecveatEntry   *ebpf.Program `ebpf:"kprobe_execveat_entry"`
	KretprobeExecveatExit *ebpf.Program `ebpf:"kretprobe_execveat_exit"`
}

func (p *execveatPrograms) Close() error {
	return _ExecveatClose(
		p.KprobeExecveatEntry,
		p.KretprobeExecveatExit,
	)
}

func _ExecveatClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed execveat_bpfel_x86.o
var _ExecveatBytes []byte
