// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package file_open

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type openEventData struct {
	EventContext struct {
		Ts        uint64
		StartTime uint64
		Pid       uint32
		Tgid      uint32
		Ppid      uint32
		Glpid     uint32
		Uid       uint32
		Gid       uint32
		MountId   int32
		MountNsId uint32
		CgroupId  uint64
		NodeInfo  struct {
			Sysname    [65]uint8
			Nodename   [65]uint8
			Release    [65]uint8
			Version    [65]uint8
			Machine    [65]uint8
			Domainname [65]uint8
		}
		Comm         [16]uint8
		Cwd          [32]uint8
		MountDevname [256]uint8
	}
	_        [2]byte
	Id       int32
	Flags    int32
	Ret      int32
	Mode     uint16
	Filename [4096]uint8
	_        [2]byte
}

// loadOpen returns the embedded CollectionSpec for open.
func loadOpen() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_OpenBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load open: %w", err)
	}

	return spec, err
}

// loadOpenObjects loads open and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*openObjects
//	*openPrograms
//	*openMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadOpenObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadOpen()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// openSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type openSpecs struct {
	openProgramSpecs
	openMapSpecs
}

// openSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type openProgramSpecs struct {
	KprobeOpenEntry   *ebpf.ProgramSpec `ebpf:"kprobe_open_entry"`
	KretprobeOpenExit *ebpf.ProgramSpec `ebpf:"kretprobe_open_exit"`
}

// openMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type openMapSpecs struct {
	OpenEventMap *ebpf.MapSpec `ebpf:"open_event_map"`
}

// openObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadOpenObjects or ebpf.CollectionSpec.LoadAndAssign.
type openObjects struct {
	openPrograms
	openMaps
}

func (o *openObjects) Close() error {
	return _OpenClose(
		&o.openPrograms,
		&o.openMaps,
	)
}

// openMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadOpenObjects or ebpf.CollectionSpec.LoadAndAssign.
type openMaps struct {
	OpenEventMap *ebpf.Map `ebpf:"open_event_map"`
}

func (m *openMaps) Close() error {
	return _OpenClose(
		m.OpenEventMap,
	)
}

// openPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadOpenObjects or ebpf.CollectionSpec.LoadAndAssign.
type openPrograms struct {
	KprobeOpenEntry   *ebpf.Program `ebpf:"kprobe_open_entry"`
	KretprobeOpenExit *ebpf.Program `ebpf:"kretprobe_open_exit"`
}

func (p *openPrograms) Close() error {
	return _OpenClose(
		p.KprobeOpenEntry,
		p.KretprobeOpenExit,
	)
}

func _OpenClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed open_bpfel_x86.o
var _OpenBytes []byte
