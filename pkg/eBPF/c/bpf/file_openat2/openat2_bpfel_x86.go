// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package file_openat2

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type openat2EventData struct {
	EventContext struct {
		Ts        uint64
		StartTime uint64
		Pid       uint32
		Tgid      uint32
		Ppid      uint32
		Glpid     uint32
		Uid       uint32
		Gid       uint32
		MountId   int32
		MountNsId uint32
		CgroupId  uint64
		NodeInfo  struct {
			Sysname    [65]uint8
			Nodename   [65]uint8
			Release    [65]uint8
			Version    [65]uint8
			Machine    [65]uint8
			Domainname [65]uint8
		}
		Comm         [16]uint8
		Cwd          [32]uint8
		MountDevname [256]uint8
	}
	_     [2]byte
	Id    int32
	Fd    int32
	Usize int64
	Ret   int64
	How   struct {
		Flags   uint64
		Mode    uint64
		Resolve uint64
	}
	Filename [4096]uint8
}

// loadOpenat2 returns the embedded CollectionSpec for openat2.
func loadOpenat2() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_Openat2Bytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load openat2: %w", err)
	}

	return spec, err
}

// loadOpenat2Objects loads openat2 and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*openat2Objects
//	*openat2Programs
//	*openat2Maps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadOpenat2Objects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadOpenat2()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// openat2Specs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type openat2Specs struct {
	openat2ProgramSpecs
	openat2MapSpecs
}

// openat2Specs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type openat2ProgramSpecs struct {
	KprobeOpenat2Entry   *ebpf.ProgramSpec `ebpf:"kprobe_openat2_entry"`
	KretprobeOpenat2Exit *ebpf.ProgramSpec `ebpf:"kretprobe_openat2_exit"`
}

// openat2MapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type openat2MapSpecs struct {
	Openat2EventMap *ebpf.MapSpec `ebpf:"openat2_event_map"`
}

// openat2Objects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadOpenat2Objects or ebpf.CollectionSpec.LoadAndAssign.
type openat2Objects struct {
	openat2Programs
	openat2Maps
}

func (o *openat2Objects) Close() error {
	return _Openat2Close(
		&o.openat2Programs,
		&o.openat2Maps,
	)
}

// openat2Maps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadOpenat2Objects or ebpf.CollectionSpec.LoadAndAssign.
type openat2Maps struct {
	Openat2EventMap *ebpf.Map `ebpf:"openat2_event_map"`
}

func (m *openat2Maps) Close() error {
	return _Openat2Close(
		m.Openat2EventMap,
	)
}

// openat2Programs contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadOpenat2Objects or ebpf.CollectionSpec.LoadAndAssign.
type openat2Programs struct {
	KprobeOpenat2Entry   *ebpf.Program `ebpf:"kprobe_openat2_entry"`
	KretprobeOpenat2Exit *ebpf.Program `ebpf:"kretprobe_openat2_exit"`
}

func (p *openat2Programs) Close() error {
	return _Openat2Close(
		p.KprobeOpenat2Entry,
		p.KretprobeOpenat2Exit,
	)
}

func _Openat2Close(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed openat2_bpfel_x86.o
var _Openat2Bytes []byte
