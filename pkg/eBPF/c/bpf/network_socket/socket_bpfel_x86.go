// Code generated by bpf2go; DO NOT EDIT.
//go:build 386 || amd64

package network_socket

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

type socketEventData struct {
	EventContext struct {
		Ts        uint64
		StartTime uint64
		Pid       uint32
		Tgid      uint32
		Ppid      uint32
		Glpid     uint32
		Uid       uint32
		Gid       uint32
		MountId   int32
		MountNsId uint32
		CgroupId  uint64
		NodeInfo  struct {
			Sysname    [65]uint8
			Nodename   [65]uint8
			Release    [65]uint8
			Version    [65]uint8
			Machine    [65]uint8
			Domainname [65]uint8
		}
		Comm         [16]uint8
		Cwd          [32]uint8
		MountDevname [256]uint8
	}
	_        [2]byte
	Id       int32
	Domain   uint32
	Type     uint32
	Protocol uint32
	Ret      int32
}

// loadSocket returns the embedded CollectionSpec for socket.
func loadSocket() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_SocketBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load socket: %w", err)
	}

	return spec, err
}

// loadSocketObjects loads socket and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*socketObjects
//	*socketPrograms
//	*socketMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadSocketObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadSocket()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// socketSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type socketSpecs struct {
	socketProgramSpecs
	socketMapSpecs
}

// socketSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type socketProgramSpecs struct {
	KprobeSocketEntry   *ebpf.ProgramSpec `ebpf:"kprobe_socket_entry"`
	KretprobeSocketExit *ebpf.ProgramSpec `ebpf:"kretprobe_socket_exit"`
}

// socketMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type socketMapSpecs struct {
	SocketEventMap *ebpf.MapSpec `ebpf:"socket_event_map"`
}

// socketObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadSocketObjects or ebpf.CollectionSpec.LoadAndAssign.
type socketObjects struct {
	socketPrograms
	socketMaps
}

func (o *socketObjects) Close() error {
	return _SocketClose(
		&o.socketPrograms,
		&o.socketMaps,
	)
}

// socketMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadSocketObjects or ebpf.CollectionSpec.LoadAndAssign.
type socketMaps struct {
	SocketEventMap *ebpf.Map `ebpf:"socket_event_map"`
}

func (m *socketMaps) Close() error {
	return _SocketClose(
		m.SocketEventMap,
	)
}

// socketPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadSocketObjects or ebpf.CollectionSpec.LoadAndAssign.
type socketPrograms struct {
	KprobeSocketEntry   *ebpf.Program `ebpf:"kprobe_socket_entry"`
	KretprobeSocketExit *ebpf.Program `ebpf:"kretprobe_socket_exit"`
}

func (p *socketPrograms) Close() error {
	return _SocketClose(
		p.KprobeSocketEntry,
		p.KretprobeSocketExit,
	)
}

func _SocketClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed socket_bpfel_x86.o
var _SocketBytes []byte
